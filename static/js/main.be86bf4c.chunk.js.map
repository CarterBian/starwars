{"version":3,"sources":["components/Navbar.js","components/Planet.js","components/Planets.js","components/Person.js","components/People.js","App.js","index.js"],"names":["Navbar","setPage","onClick","Planet","planet","className","name","population","terrain","fetchPlanets","key","page","a","fetch","res","json","Planets","useState","usePaginatedQuery","resolvedData","latestData","status","old","Math","max","disabled","next","results","map","Person","person","gender","birth_year","fetchPeople","People","useQuery","data","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAWeA,EATA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACb,OACI,6BACI,4BAAQC,QAAS,kBAAMD,EAAQ,aAA/B,WACA,4BAAQC,QAAS,kBAAMD,EAAQ,YAA/B,Y,8BCMGE,EAVA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACI,yBAAKC,UAAU,QACX,wBAAIA,WAAS,GAAED,EAAOE,MACtB,2CAAiBF,EAAOG,YACxB,wCAAcH,EAAOI,WCH3BC,EAAY,uCAAG,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,sEACCC,MAAM,sCAAD,OAAuCF,IAD7C,cACXG,EADW,yBAEVA,EAAIC,QAFM,2CAAH,wDAyCHC,EApCC,WAAO,IAAD,EACMC,mBAAS,GADf,mBACXN,EADW,KACLV,EADK,OAKJiB,YAAkB,CAAC,UAAWP,GAAOF,GAF/CU,EAHc,EAGdA,aACAC,EAJc,EAIdA,WACAC,EALc,EAKdA,OACJ,OACI,6BACI,uCAEY,YAAXA,GACG,6CAEQ,UAAXA,GACG,oDAEQ,YAAXA,GACG,oCACI,4BACInB,QAAS,kBAAMD,GAAQ,SAAAqB,GAAG,OAAIC,KAAKC,IAAIF,EAAM,EAAG,OAChDG,SAAmB,IAATd,GAFd,iBAIA,8BAAOA,GACP,4BACIT,QAAS,kBAAMD,GAAQ,SAAAqB,GAAG,OAAMF,GAAeA,EAAWM,KAAaJ,EAAM,EAAZA,MACjEG,UAAWL,IAAeA,EAAWM,MAFzC,aAIA,6BACKP,EAAaQ,QAAQC,KAAI,SAAAxB,GAAM,OAAI,kBAAC,EAAD,CAAQM,IAAKN,EAAOE,KAAMF,OAAQA,WCzB/EyB,EAVA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACI,yBAAKzB,UAAU,QACX,4BAAKyB,EAAOxB,MACZ,uCAAawB,EAAOC,QACpB,2CAAiBD,EAAOE,cCH9BC,EAAW,uCAAG,4BAAArB,EAAA,sEACEC,MAAM,gCADR,cACVC,EADU,yBAETA,EAAIC,QAFK,2CAAH,qDA2BFmB,EAtBA,WAAO,IAAD,EACMC,YAAS,SAAUF,GAAnCG,EADU,EACVA,KAAMf,EADI,EACJA,OACb,OACI,6BACI,sCACY,YAAXA,GACG,6CAEQ,UAAXA,GACG,oDAEQ,YAAXA,GACG,6BACKe,EAAKT,QAAQC,KAAI,SAAAE,GAAM,OACpB,kBAAC,EAAD,CAAQpB,IAAKoB,EAAOxB,KAAMwB,OAAQA,UCF3CO,MAhBf,WAAgB,IAAD,EACWpB,mBAAS,WADpB,mBACNN,EADM,KACAV,EADA,KAGb,OACE,oCACA,yBAAKI,UAAU,OACb,8CACA,kBAAC,EAAD,CAAQJ,QAASA,IACjB,yBAAKI,UAAU,WACH,YAATM,EAAqB,kBAAC,EAAD,MAAc,kBAAC,EAAD,UCT5C2B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.be86bf4c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = ({setPage}) => {\n    return ( \n        <nav>\n            <button onClick={() => setPage('planets')}>Planets</button>\n            <button onClick={() => setPage('people')}>People</button>\n        </nav>\n    );\n}\n \nexport default Navbar;","import React from 'react';\n\nconst Planet = ({planet}) => {\n    return ( \n        <div className=\"card\">\n            <h3 className>{planet.name}</h3>\n            <p>Population - {planet.population}</p>\n            <p>Terrain - {planet.terrain}</p>\n        </div>\n    );\n}\n \nexport default Planet;","import React, { useState } from 'react';\nimport {usePaginatedQuery} from 'react-query';\nimport Planet from './Planet';\n\nconst fetchPlanets = async (key, page) => {\n    const res = await fetch(`http://swapi.dev/api/planets/?page=${page}`);\n    return res.json();\n}\n\nconst Planets = () => {\n    const [page, setPage] = useState(1);\n    const {\n        resolvedData,\n        latestData, \n        status} = usePaginatedQuery(['planets', page], fetchPlanets);\n    return ( \n        <div>\n            <h2>Planets</h2>\n\n            {status === 'loading' && (\n                <div>Loading data</div>\n            )}\n            {status === 'error' && (\n                <div>Error fetching data</div>\n            )}\n            {status === 'success' && (\n                <>\n                    <button\n                        onClick={() => setPage(old => Math.max(old - 1, 1))}\n                        disabled={page === 1}\n                    >Previous page</button>\n                    <span>{page}</span>\n                    <button\n                        onClick={() => setPage(old => (!latestData || !latestData.next ? old : old + 1))}\n                        disabled={!latestData || !latestData.next}\n                    >Next page</button>\n                    <div>\n                        {resolvedData.results.map(planet => <Planet key={planet.name} planet={planet} />)}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n \nexport default Planets;","import React from 'react';\n\nconst Person = ({person}) => {\n    return ( \n        <div className=\"card\">\n            <h3>{person.name}</h3>\n            <p>Gender - {person.gender}</p>\n            <p>Birth year - {person.birth_year}</p>\n        </div>\n    );\n}\n \nexport default Person;","import React from 'react';\nimport {useQuery} from 'react-query';\nimport Person from './Person';\n\nconst fetchPeople = async () => {\n    const res = await fetch('http://swapi.dev/api/people/');\n    return res.json();\n}\n\nconst People = () => {\n    const {data, status} = useQuery('people', fetchPeople);\n    return ( \n        <div>\n            <h2>People</h2>\n            {status === 'loading' && (\n                <div>Loading data</div>\n            )}\n            {status === 'error' && (\n                <div>Error fetching data</div>\n            )}\n            {status === 'success' && (\n                <div>\n                    {data.results.map(person => \n                        <Person key={person.name} person={person}/>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n \nexport default People;","import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport Planets from './components/Planets';\nimport People from './components/People';\n\nfunction App() {\n  const [page, setPage] = useState('planets');\n\n  return (\n    <>\n    <div className=\"App\">\n      <h1>Star Wars Info</h1>\n      <Navbar setPage={setPage}/>\n      <div className=\"content\">\n        {page === 'planets' ? <Planets /> : <People /> }\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}